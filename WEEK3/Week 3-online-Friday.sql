{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}}
{\*\generator Riched20 10.0.18362}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\f0\fs22\lang9 -- Section FF\par
--SINGLE-ROW FUNCTIONS\par
SELECT INITCAP('the soap')FROM DUAL;\par
SELECT INSTR('HELLO WORLD', 'W') \par
FROM DUAL;\par
SELECT * FROM ORDERDETAILS;\par
SELECT LPAD(PRICEEACH, 10, '*')\par
FROM ORDERDETAILS;\par
SELECT RPAD(PRICEEACH, 10, '*')\par
FROM ORDERDETAILS;\par
SELECT REPLACE('Jack and Jue', 'J', 'Bl')\par
from dual;\par
SELECT TRIM('H' FROM 'Hello World')\par
from dual;\par
SELECT TRIM('d' FROM 'Hello World')\par
from dual;\par
SELECT TRIM('W' FROM 'Hello World')\par
from dual;\par
SELECT TRIM('Hello' FROM 'Hello World')\par
from dual;\par
SELECT ROUND(45.965,2), ROUND(45.965,0), ROUND(45.965,-1)\par
FROM DUAL;\par
SELECT ROUND(45.965,2), ROUND(45.965,0), ROUND(44.965,-1)\par
FROM DUAL;\par
SELECT TRUNC(45.965,2), TRUNC(45.965,0), TRUNC(45.965, -1)\par
FROM DUAL;\par
-- Between is used when range is given\par
-- lower bound and upper bound are inclusive\par
select * from orderdetails;\par
SELECT * FROM ORDERDETAILS\par
WHERE PRICEEACH BETWEEN 140 AND 150\par
ORDER BY PRICEEACH;\par
SELECT * FROM ORDERDETAILS\par
WHERE PRICEEACH NOT BETWEEN 140 AND 150\par
ORDER BY PRICEEACH;\par
-- WHEN LIST IS GIVEN USE in MEMBERSHIP CONDITION\par
SELECT EMPLOYEENUMBER, LASTNAME, OFFICECODE, JOBTITLE \par
FROM EMPLOYEES\par
WHERE OFFICECODE IN(1,2,3);\par
SELECT EMPLOYEENUMBER, LASTNAME, OFFICECODE, JOBTITLE \par
FROM EMPLOYEES\par
WHERE OFFICECODE NOT IN(1,2,3);\par
-- IS NULL\par
select * from customers\par
where state is null;\par
select * from customers\par
where state = null;\par
select * from customers\par
where state is not null;\par
\par
--Precedence of operators\par
SELECT EMPLOYEENUMBER, LASTNAME, OFFICECODE, JOBTITLE\par
FROM EMPLOYEES\par
WHERE OFFICECODE > 4 AND JOBTITLE LIKE '%Man%';\par
SELECT EMPLOYEENUMBER, LASTNAME, OFFICECODE, JOBTITLE\par
FROM EMPLOYEES\par
WHERE OFFICECODE > 4 OR JOBTITLE LIKE '%Man%';\par
SELECT EMPLOYEENUMBER, LASTNAME, OFFICECODE, JOBTITLE\par
FROM EMPLOYEES\par
WHERE JOBTITLE LIKE '%Man%' OR JOBTITLE LIKE '%Sales%' and OFFICECODE > 4;\par
SELECT EMPLOYEENUMBER, LASTNAME, OFFICECODE, JOBTITLE\par
FROM EMPLOYEES\par
WHERE (JOBTITLE LIKE '%Man%' OR JOBTITLE LIKE '%Sales%') and OFFICECODE > 4;\par
SEleCT EMPLOYEENUMBER, LASTNAME, OFFIceCODE, JOBTITLE\par
FROM EMPLOYEEs\par
WHERE JOBTITLE LIKE '%Man%' OR JOBTITLE LIKE '%Sales%' and OFFICECODE > 4;\par
-- ROWNUM\par
SELECT * FROM EMPLOYEES\par
WHERE ROWNUM < =5;\par
\par
SELECT ROWNUM NUM, ROWNUM*ROWNUM SQR, ROWNUM*ROWNUM*ROWNUM AS CUBE\par
FROM EMPLOYEES\par
WHERE ROWNUM < 10;\par
-- DML INSERT UPDATE DELETE\par
--HOW TO COPY A TABLE FROM EXISITING TABLE\par
DROP TABLE CUS_COPY;\par
ROLLBACK;\par
-- COPY STRUCTURE AND DATA FROM THE EXISTING TABLE\par
CREATE TABLE CUS_COPY AS\par
SELECT * FROM CUSTOMERS;\par
SELECT * FROM CUS_COPY;\par
-- COPY ONLY STRUCTURE OF THE EXISTING TABLE\par
CREATE TABLE CUS_COPY AS\par
SELECT * FROM CUSTOMERS\par
WHERE 1=2;\par
INSERT INTO CUS_COPY\par
SELECT * FROM CUSTOMERS WHERE STATE IN('NY', 'CA');\par
-- HOW TO INSERT DEFAULT VALUE\par
DROP TABLE STUDENT;\par
CREATE TABLE STUDENT(ID NUMBER(9), LASTNAME VARCHAR2(30), GRADE CHAR(1) DEFAULT 'A');\par
SELECT * FROM STUDENT;\par
INSERT INTO STUDENT VALUES(3456, 'Kim', 'B');\par
INSERT INTO STUDENT VALUES(4567, 'Lin', DEFAULT);\par
INSERT INTO STUDENT (ID, LASTNAME)VALUES (6785, 'John');\par
-- UPDATE\par
UPDATE EMPLOYEES SET LASTNAME = 'Smith';\par
select * from employees;\par
rollback;\par
UPDATE EMPLOYEES SET LASTNAME = 'Smith'\par
where lastname = 'Patterson';\par
UPDATE EMPLOYEES SET LASTNAME = 'Smith'\par
where employeenumber= 1002;\par
commit;\par
delete orderdetails;\par
select * from orderdetails;\par
delete from orderdetails;\par
-- DISTINCT IS USED FOR AVOIDING DUPLICATES\par
SELECT * FROM EMPLOYEES;\par
SELECT DISTINCT OFFICECODE FROM EMPLOYEES;\par
----------------------------------\par
-- Section EE\par
--------------------------------\par
-- single-row functions\par
SELECT INITCAP('the soap') FROM DUAL;\par
SELECT INSTR('Hello World', 'W') from dual;\par
SELECT * FROM ORDERDETAILS;\par
SELECT LPAD(PRICEEACH, 10, '*') FROM ORDERDETAILS;\par
SELECT RPAD(PRICEEACH, 10, '*') FROM ORDERDETAILS;\par
SELECT REPLACE('Jack and Jue','J', 'Bl') as replaced from dual;\par
SELECT TRIM('H' FROM 'HELLOWORLD') FROM DUAL;\par
SELECT TRIM('D' FROM 'HELLOWORLD') FROM DUAL;\par
SELECT TRIM('W' FROM 'HELLOWORLD') FROM DUAL;\par
SELECT TRIM('HELLO' FROM 'HELLOWORLD') FROM DUAL;\par
SELECT ROUND(45.965,2), ROUND(45.965,0), ROUND(45.965, -1)\par
FROM DUAL;\par
SELECT ROUND(45.965,2), ROUND(45.965,0), ROUND(44.965, -1)\par
FROM DUAL;\par
SELECT TRUNC(45.965,2), TRUNC(45.965,0), TRUNC(45.965, -1)\par
FROM DUAL;\par
\par
-- BETWEEN IS USED WHEN WE HAVE A RANGE\par
-- BOTH LOWER BOUND AND UPPER BOUND ARE INCLUSIVE\par
SELECT * FROM ORDERDETAILS;\par
SELECT * FROM ORDERDETAILS\par
WHERE PRICEEACH BETWEEN 140 AND 150;\par
SELECT * FROM ORDERDETAILS\par
WHERE PRICEEACH NOT BETWEEN 140 AND 150;\par
-- IN MEMBERSHIP CONDITION\par
-- WHENEVER A LIST IS GIVEN WE SHOULD USE IT\par
SELECT * FROM EMPLOYEES;\par
SELECT EMPLOYEENUMBER, LASTNAME, OFFICECODE, JOBTITLE\par
FROM EMPLOYEES\par
WHERE OFFICECODE IN(1,2,3);\par
SELECT EMPLOYEENUMBER, LASTNAME, OFFICECODE, JOBTITLE\par
FROM EMPLOYEES\par
WHERE OFFICECODE NOT IN(1,2,3);\par
-- IS NULL\par
SELECT * FROM CUSTOMERS;\par
SELECT CUSTOMERNUMBER,CUSTOMERNAME, CITY, STATE  FROM CUSTOMERS\par
WHERE STATE IS NULL;\par
SELECT CUSTOMERNUMBER,CUSTOMERNAME, CITY, STATE  FROM CUSTOMERS\par
WHERE STATE IS NOT NULL;\par
SELECT CUSTOMERNUMBER,CUSTOMERNAME, CITY, STATE  FROM CUSTOMERS\par
WHERE STATE = NULL;\par
\par
--PRECEDENCE\par
SELECT EMPLOYEENUMBER, LASTNAME, OFFICECODE,JOBTITLE\par
FROM EMPLOYEES\par
WHERE OFFICECODE > 4 AND JOBTITLE LIKE '%Man%';\par
SELECT EMPLOYEENUMBER, LASTNAME, OFFICECODE,JOBTITLE\par
FROM EMPLOYEES\par
WHERE OFFICECODE > 4 or JOBTITLE LIKE '%Man%';\par
SELECT EMPLOYEENUMBER, LASTNAME, OFFICECODE,JOBTITLE\par
FROM EMPLOYEES\par
WHERE JOBTITLE LIKE '%Man%' OR JOBTITLE LIKE '%Sales%' and officecode > 4;\par
SELECT EMPLOYEENUMBER, LASTNAME, OFFICECODE,JOBTITLE\par
FROM EMPLOYEES\par
WHERE (JOBTITLE LIKE '%Man%' OR JOBTITLE LIKE '%Sales%') and officecode > 4;\par
\par
--ROWNUM\par
SELECT * FROM ORDERS;\par
SELECT * FROM ORDERS\par
WHERE ROWNUM <= 5;\par
\par
SELECT ROWNUM NUM, ROWNUM*ROWNUM  SQR, ROWNUM*ROWNUM*ROWNUM AS CUBE\par
FROM ORDERS\par
WHERE ROWNUM < 10;\par
-- DML ( INSERT, UPDATE, DELETE)\par
-- COPY STRUCTURE OF TABLE AND ALSO THE DATA FROM EXISTING TABLE\par
CREATE TABLE CUS_COPY AS \par
SELECT * FROM CUSTOMERS;\par
SELECT * FROM CUS_COPY;\par
DROP TABLE CUS_COPY;\par
-- ONLY COPY STRUCTURE OF TEH EXISTING TABLE\par
CREATE TABLE CUS_COPY AS \par
SELECT * FROM CUSTOMERS\par
WHERE 1=2;\par
SELECT * FROM CUS_COPY;\par
INSERT INTO CUS_COPY\par
SELECT * FROM CUSTOMERS\par
WHERE STATE IN('NY', 'CA');\par
\par
DROP TABLE STUDENT;\par
ROLLBACK;\par
\par
CREATE TABLE STUDENT(ID NUMBER(9), LASTNAME VARCHAR2(30), GRADE CHAR(1) DEFAULT 'A');\par
SELECT * FROM STUDENT;\par
INSERT INTO STUDENT VALUES(7891, 'Kim', 'B');\par
insert into student values(4561, 'Tin', default);\par
insert into student (id, lastname) values (898, 'John');\par
-- update , where is very important\par
UPDATE EMPLOYEES SET LASTNAME ='Smith';\par
SELECT * FROM EMPLOYEES;\par
ROLLBACK;\par
UPDATE EMPLOYEES SET LASTNAME ='Smith'\par
WHERE LASTNAME = 'Patterson' ;\par
\par
UPDATE EMPLOYEES SET LASTNAME ='Smith'\par
WHERE employeenumber = 1002;\par
delete orderdetails;\par
select * from orderdetails;\par
delete from orderdetails;\par
delete from customers;\par
\par
select * from student;\par
commit;\par
rollback;\par
-- Distinct key word is used to avoid duplicates\par
select  distinct officecode from employees;\par
\par
}
 